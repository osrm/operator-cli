// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package OperatorRegistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// OperatorRegistryMetaData contains all meta data concerning the OperatorRegistry contract.
var OperatorRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"OperatorSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"operator\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"OperatorsWhiteListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"watchtower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"WatchtowerDeRegisteredFromOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"watchtower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"WatchtowerRegisteredToOperator\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operatorsList\",\"type\":\"address[]\"}],\"name\":\"addToOperatorWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateWatchtowerRegistrationMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIsDelegatedOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"watchtowerAddress\",\"type\":\"address\"}],\"name\":\"deRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableCheckIsDelegatedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableCheckIsDelegatedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"watchtower\",\"type\":\"address\"}],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegationManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_slasherAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isActiveOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"watchtower\",\"type\":\"address\"}],\"name\":\"isValidWatchtower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operatorDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"watchtower\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signedMessage\",\"type\":\"bytes\"}],\"name\":\"registerWatchtowerAsOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegationManagerAddress\",\"type\":\"address\"}],\"name\":\"setDelegationManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slasherAddress\",\"type\":\"address\"}],\"name\":\"setSlasherAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasherAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"}],\"name\":\"suspend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"watchtowerSaltUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60a06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff16815250348015610042575f80fd5b5061005161005660201b60201c565b6101e6565b5f60019054906101000a900460ff16156100a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161009c90610194565b60405180910390fd5b60ff80165f8054906101000a900460ff1660ff1610156101125760ff5f806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff60405161010991906101cd565b60405180910390a15b565b5f82825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e6974695f8201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b5f61017e602783610114565b915061018982610124565b604082019050919050565b5f6020820190508181035f8301526101ab81610172565b9050919050565b5f60ff82169050919050565b6101c7816101b2565b82525050565b5f6020820190506101e05f8301846101be565b92915050565b60805161479e61021a5f395f818161097d01528181610a0b01528181610d3901528181610dc70152610e76015261479e5ff3fe6080604052600436106101cc575f3560e01c80637831ad20116100f6578063ae10372511610094578063cb73ac5611610063578063cb73ac5614610613578063d53c61bf1461063d578063f2fde38b14610667578063fc4bd47f1461068f576101cc565b8063ae10372514610548578063b15e668914610584578063c5e480db146105ae578063c8525c3e146105eb576101cc565b80638da5cb5b116100d05780638da5cb5b146104905780639053c5b3146104ba5780639a521382146104e4578063addd9cf514610520576101cc565b80637831ad201461043c578063827a1bf5146104645780638456cb591461047a576101cc565b8063485cc9551161016e5780635b114af61161013d5780635b114af6146103aa5780635c468db3146103d25780635c975abb146103fc578063715018a614610426576101cc565b8063485cc955146103005780634f1ef2861461032857806352d1902d146103445780635865c60c1461036e576101cc565b806335e40350116101aa57806335e403501461024a5780633659cfe6146102865780633af32abf146102ae5780633f4ba83a146102ea576101cc565b806317fa0ce8146101d0578063286781c7146101e65780633367cca51461020e575b5f80fd5b3480156101db575f80fd5b506101e46106b7565b005b3480156101f1575f80fd5b5061020c60048036038101906102079190612d4c565b61072c565b005b348015610219575f80fd5b50610234600480360381019061022f9190612d4c565b6108fe565b6040516102419190612d91565b60405180910390f35b348015610255575f80fd5b50610270600480360381019061026b9190612ddd565b610950565b60405161027d9190612d91565b60405180910390f35b348015610291575f80fd5b506102ac60048036038101906102a79190612d4c565b61097b565b005b3480156102b9575f80fd5b506102d460048036038101906102cf9190612d4c565b610b01565b6040516102e19190612d91565b60405180910390f35b3480156102f5575f80fd5b506102fe610b53565b005b34801561030b575f80fd5b5061032660048036038101906103219190612e1b565b610b6d565b005b610342600480360381019061033d9190612f95565b610d37565b005b34801561034f575f80fd5b50610358610e73565b6040516103659190612ffe565b60405180910390f35b348015610379575f80fd5b50610394600480360381019061038f9190612d4c565b610f2a565b6040516103a19190613026565b60405180910390f35b3480156103b5575f80fd5b506103d060048036038101906103cb9190612d4c565b610f90565b005b3480156103dd575f80fd5b506103e661118a565b6040516103f391906130f6565b60405180910390f35b348015610407575f80fd5b50610410611215565b60405161041d9190612d91565b60405180910390f35b348015610431575f80fd5b5061043a61122a565b005b348015610447575f80fd5b50610462600480360381019061045d9190612d4c565b61123d565b005b34801561046f575f80fd5b50610478611290565b005b348015610485575f80fd5b5061048e611303565b005b34801561049b575f80fd5b506104a461131d565b6040516104b19190613026565b60405180910390f35b3480156104c5575f80fd5b506104ce611345565b6040516104db9190612d91565b60405180910390f35b3480156104ef575f80fd5b5061050a60048036038101906105059190612d4c565b611358565b6040516105179190612d91565b60405180910390f35b34801561052b575f80fd5b5061054660048036038101906105419190612d4c565b611476565b005b348015610553575f80fd5b5061056e60048036038101906105699190613149565b6114c9565b60405161057b9190612ffe565b60405180910390f35b34801561058f575f80fd5b50610598611537565b6040516105a59190613026565b60405180910390f35b3480156105b9575f80fd5b506105d460048036038101906105cf9190612d4c565b61155c565b6040516105e2929190613199565b60405180910390f35b3480156105f6575f80fd5b50610611600480360381019061060c919061321d565b6115a7565b005b34801561061e575f80fd5b506106276117bb565b6040516106349190612ffe565b60405180910390f35b348015610648575f80fd5b506106516117c9565b60405161065e9190613026565b60405180910390f35b348015610672575f80fd5b5061068d60048036038101906106889190612d4c565b6117ee565b005b34801561069a575f80fd5b506106b560048036038101906106b09190613268565b611870565b005b6106bf611cdc565b60ff60149054906101000a900460ff161561070f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070690613368565b60405180910390fd5b600160ff60146101000a81548160ff021916908315150217905550565b610734611d5a565b61073c611cdc565b60fd5f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc9061341c565b60405180910390fd5b6107ce81611da4565b6107d6612cb1565b81815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505f8160200190151590811515815250508060fb5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160146101000a81548160ff0219169083151502179055509050507f98ff055e829cd4bfba35f84d3b43877fd53084d2deebbb1cda57404f44df4def82436040516108f2929190613449565b60405180910390a15050565b5f60fd5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b610101602052815f5260405f20602052805f5260405f205f915091509054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a00906134e0565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a48611f73565b73ffffffffffffffffffffffffffffffffffffffff1614610a9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a959061356e565b60405180910390fd5b610aa781611fc6565b610afe815f67ffffffffffffffff811115610ac557610ac4612e71565b5b6040519080825280601f01601f191660200182016040528015610af75781602001600182028036833780820191505090505b505f611fd1565b50565b5f60fd5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b610b5b61213b565b610b63611cdc565b610b6b612184565b565b5f8060019054906101000a900460ff16159050808015610b9c575060015f8054906101000a900460ff1660ff16105b80610bc85750610bab306121e5565b158015610bc7575060015f8054906101000a900460ff1660ff16145b5b610c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfe906135fc565b60405180910390fd5b60015f806101000a81548160ff021916908360ff1602179055508015610c425760015f60016101000a81548160ff0219169083151502179055505b8260fe5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160ff5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610cca612207565b610cd261225f565b610cda6122b7565b8015610d32575f8060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d299190613668565b60405180910390a15b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc906134e0565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e04611f73565b73ffffffffffffffffffffffffffffffffffffffff1614610e5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e519061356e565b60405180910390fd5b610e6382611fc6565b610e6f82826001611fd1565b5050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef9906136f1565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b905090565b5f6101005f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610f98611d5a565b3373ffffffffffffffffffffffffffffffffffffffff166101005f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105a906137a5565b60405180910390fd5b60fd5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166110ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e390613859565b60405180910390fd5b6101005f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690557fecfc290ff8c3aac71e14aee07653f81e5aa316be4d2315ba2ec1bff9dc50cd7933824360405161117f93929190613877565b60405180910390a150565b606060fc80548060200260200160405190810160405280929190818152602001828054801561120b57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116111c2575b5050505050905090565b5f60655f9054906101000a900460ff16905090565b611232611cdc565b61123b5f612307565b565b611245611d5a565b61124d611cdc565b8060fe5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611298611cdc565b60ff60149054906101000a900460ff166112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de9061391c565b60405180910390fd5b5f60ff60146101000a81548160ff021916908315150217905550565b61130b611d5a565b611313611cdc565b61131b6123ca565b565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60ff60149054906101000a900460ff1681565b5f8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113be906139aa565b60405180910390fd5b5f6101005f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611464575f915050611471565b61146d816108fe565b9150505b919050565b61147e611d5a565b611486611cdc565b8060ff5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f808484846040516020016114e0939291906139c8565b6040516020818303038152906040528051906020012090505f6115016117bb565b82604051602001611513929190613a71565b60405160208183030381529060405280519060200120905080925050509392505050565b60fe5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60fb602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690805f0160149054906101000a900460ff16905082565b6115af611d5a565b6115b7611cdc565b5f8282905090505f5b8181101561177a573073ffffffffffffffffffffffffffffffffffffffff16633af32abf8585848181106115f7576115f6613aa7565b5b905060200201602081019061160c9190612d4c565b6040518263ffffffff1660e01b81526004016116289190613026565b602060405180830381865afa158015611643573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116679190613afe565b61176f57600160fd5f86868581811061168357611682613aa7565b5b90506020020160208101906116989190612d4c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060fc8484838181106116fc576116fb613aa7565b5b90506020020160208101906117119190612d4c565b908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b8060010190506115c0565b507fdd7d462090c5f3ddd88b4c509269e35d5e148454dc3a9bd24812f78efc8f306f8383436040516117ae93929190613baf565b60405180910390a1505050565b5f6117c461242c565b905090565b60ff5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117f6611cdc565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185b90613c4f565b60405180910390fd5b61186d81612307565b50565b611878611d5a565b60fd5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16611901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f890613cdd565b60405180910390fd5b60ff60149054906101000a900460ff16156119f4575f60fe5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636d70f7ae336040518263ffffffff1660e01b81526004016119719190613026565b602060405180830381865afa15801561198c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119b09190613afe565b9050806119f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e990613d6b565b60405180910390fd5b505b5f73ffffffffffffffffffffffffffffffffffffffff166101005f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab690613df9565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611b2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2490613e87565b60405180910390fd5b42821015611b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6790613f15565b60405180910390fd5b6101015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8481526020019081526020015f205f9054906101000a900460ff1615611c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0190613fc9565b60405180910390fd5b5f611c163385856114c9565b90505f611c248683856124bb565b905080611c66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5d90614057565b60405180910390fd5b60016101015f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8781526020019081526020015f205f6101000a81548160ff021916908315150217905550611cd486612547565b505050505050565b611ce46126f6565b73ffffffffffffffffffffffffffffffffffffffff16611d0261131d565b73ffffffffffffffffffffffffffffffffffffffff1614611d58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4f906140bf565b60405180910390fd5b565b611d62611215565b15611da2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9990614127565b60405180910390fd5b565b5f5b60fc80549050811015611f1b578173ffffffffffffffffffffffffffffffffffffffff1660fc8281548110611dde57611ddd613aa7565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611f105760fc600160fc80549050611e359190614172565b81548110611e4657611e45613aa7565b5b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660fc8281548110611e8257611e81613aa7565b5b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060fc805480611ed957611ed86141a5565b5b600190038181905f5260205f20015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055611f1b565b806001019050611da6565b505f60fd5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555050565b5f611f9f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6126fd565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611fce611cdc565b50565b611ffc7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435f1b612706565b5f015f9054906101000a900460ff161561201e576120198361270f565b612136565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561208657506040513d601f19601f8201168201806040525081019061208391906141e6565b60015b6120c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bc90614281565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b8114612129576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121209061430f565b60405180910390fd5b506121358383836127c5565b5b505050565b612143611215565b612182576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217990614377565b60405180910390fd5b565b61218c61213b565b5f60655f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6121ce6126f6565b6040516121db9190613026565b60405180910390a1565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f60019054906101000a900460ff16612255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224c90614405565b60405180910390fd5b61225d6127f0565b565b5f60019054906101000a900460ff166122ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a490614405565b60405180910390fd5b6122b5612850565b565b5f60019054906101000a900460ff16612305576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fc90614405565b60405180910390fd5b565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6123d2611d5a565b600160655f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586124156126f6565b6040516124229190613026565b60405180910390a1565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6040518060400160405280600a81526020017f5769746e657373487562000000000000000000000000000000000000000000008152508051906020012046306040516020016124a09493929190614423565b60405160208183030381529060405280519060200120905090565b5f805f6124c885856128b9565b915091505f60048111156124df576124de614466565b5b8160048111156124f2576124f1614466565b5b14801561252a57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061253c575061253b868686612905565b5b925050509392505050565b61254f612cb1565b33815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001816020019015159081151581525050336101005f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060fb5f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151815f0160146101000a81548160ff0219169083151502179055509050507f3d521ffddd8cbc2d603c1e7fe9af4b70adbbc43675a7281c5624d8053e526f063383436040516126ea93929190613877565b60405180910390a15050565b5f33905090565b5f819050919050565b5f819050919050565b612718816121e5565b612757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161274e90614503565b60405180910390fd5b806127837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6126fd565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6127ce83612a44565b5f825111806127da5750805b156127eb576127e98383612a93565b505b505050565b5f60019054906101000a900460ff1661283e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283590614405565b60405180910390fd5b61284e6128496126f6565b612307565b565b5f60019054906101000a900460ff1661289e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289590614405565b60405180910390fd5b5f60655f6101000a81548160ff021916908315150217905550565b5f8060418351036128f6575f805f602086015192506040860151915060608601515f1a90506128ea87828585612b73565b945094505050506128fe565b5f6002915091505b9250929050565b5f805f8573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b868660405160240161293a929190614581565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516129a491906145e9565b5f60405180830381855afa9150503d805f81146129dc576040519150601f19603f3d011682016040523d82523d5f602084013e6129e1565b606091505b50915091508180156129f557506020815110155b8015612a395750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681806020019051810190612a3791906141e6565b145b925050509392505050565b612a4d8161270f565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060612a9e836121e5565b612add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad49061466f565b60405180910390fd5b5f808473ffffffffffffffffffffffffffffffffffffffff1684604051612b0491906145e9565b5f60405180830381855af49150503d805f8114612b3c576040519150601f19603f3d011682016040523d82523d5f602084013e612b41565b606091505b5091509150612b69828260405180606001604052806027815260200161474260279139612c4b565b9250505092915050565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0835f1c1115612bab575f600391509150612c42565b5f6001878787876040515f8152602001604052604051612bce949392919061469c565b6020604051602081039080840390855afa158015612bee573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612c3a575f60019250925050612c42565b805f92509250505b94509492505050565b60608315612c5b57829050612caa565b5f83511115612c6d5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ca19190614721565b60405180910390fd5b9392505050565b60405180604001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f151581525090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f612d1b82612cf2565b9050919050565b612d2b81612d11565b8114612d35575f80fd5b50565b5f81359050612d4681612d22565b92915050565b5f60208284031215612d6157612d60612cea565b5b5f612d6e84828501612d38565b91505092915050565b5f8115159050919050565b612d8b81612d77565b82525050565b5f602082019050612da45f830184612d82565b92915050565b5f819050919050565b612dbc81612daa565b8114612dc6575f80fd5b50565b5f81359050612dd781612db3565b92915050565b5f8060408385031215612df357612df2612cea565b5b5f612e0085828601612d38565b9250506020612e1185828601612dc9565b9150509250929050565b5f8060408385031215612e3157612e30612cea565b5b5f612e3e85828601612d38565b9250506020612e4f85828601612d38565b9150509250929050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612ea782612e61565b810181811067ffffffffffffffff82111715612ec657612ec5612e71565b5b80604052505050565b5f612ed8612ce1565b9050612ee48282612e9e565b919050565b5f67ffffffffffffffff821115612f0357612f02612e71565b5b612f0c82612e61565b9050602081019050919050565b828183375f83830152505050565b5f612f39612f3484612ee9565b612ecf565b905082815260208101848484011115612f5557612f54612e5d565b5b612f60848285612f19565b509392505050565b5f82601f830112612f7c57612f7b612e59565b5b8135612f8c848260208601612f27565b91505092915050565b5f8060408385031215612fab57612faa612cea565b5b5f612fb885828601612d38565b925050602083013567ffffffffffffffff811115612fd957612fd8612cee565b5b612fe585828601612f68565b9150509250929050565b612ff881612daa565b82525050565b5f6020820190506130115f830184612fef565b92915050565b61302081612d11565b82525050565b5f6020820190506130395f830184613017565b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61307181612d11565b82525050565b5f6130828383613068565b60208301905092915050565b5f602082019050919050565b5f6130a48261303f565b6130ae8185613049565b93506130b983613059565b805f5b838110156130e95781516130d08882613077565b97506130db8361308e565b9250506001810190506130bc565b5085935050505092915050565b5f6020820190508181035f83015261310e818461309a565b905092915050565b5f819050919050565b61312881613116565b8114613132575f80fd5b50565b5f813590506131438161311f565b92915050565b5f805f606084860312156131605761315f612cea565b5b5f61316d86828701612d38565b935050602061317e86828701612dc9565b925050604061318f86828701613135565b9150509250925092565b5f6040820190506131ac5f830185613017565b6131b96020830184612d82565b9392505050565b5f80fd5b5f80fd5b5f8083601f8401126131dd576131dc612e59565b5b8235905067ffffffffffffffff8111156131fa576131f96131c0565b5b602083019150836020820283011115613216576132156131c4565b5b9250929050565b5f806020838503121561323357613232612cea565b5b5f83013567ffffffffffffffff8111156132505761324f612cee565b5b61325c858286016131c8565b92509250509250929050565b5f805f80608085870312156132805761327f612cea565b5b5f61328d87828801612d38565b945050602061329e87828801612dc9565b93505060406132af87828801613135565b925050606085013567ffffffffffffffff8111156132d0576132cf612cee565b5b6132dc87828801612f68565b91505092959194509250565b5f82825260208201905092915050565b7f5769746e6573734875623a20454c2064656c65676174696f6e20636865636b205f8201527f697320616c726561647920656e61626c65640000000000000000000000000000602082015250565b5f6133526032836132e8565b915061335d826132f8565b604082019050919050565b5f6020820190508181035f83015261337f81613346565b9050919050565b7f5769746e6573734875623a2043616e6e6f742073757370656e64206966206f705f8201527f657261746f7220697320616c72656164792073757370656e646564206f72206e60208201527f6f742077686974656c6973746564000000000000000000000000000000000000604082015250565b5f613406604e836132e8565b915061341182613386565b606082019050919050565b5f6020820190508181035f830152613433816133fa565b9050919050565b61344381613116565b82525050565b5f60408201905061345c5f830185613017565b613469602083018461343a565b9392505050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f756768205f8201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b5f6134ca602c836132e8565b91506134d582613470565b604082019050919050565b5f6020820190508181035f8301526134f7816134be565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f756768205f8201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b5f613558602c836132e8565b9150613563826134fe565b604082019050919050565b5f6020820190508181035f8301526135858161354c565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f6135e6602e836132e8565b91506135f18261358c565b604082019050919050565b5f6020820190508181035f830152613613816135da565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f61365261364d6136488461361a565b61362f565b613623565b9050919050565b61366281613638565b82525050565b5f60208201905061367b5f830184613659565b92915050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c5f8201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b5f6136db6038836132e8565b91506136e682613681565b604082019050919050565b5f6020820190508181035f830152613708816136cf565b9050919050565b7f5769746e6573734875623a204465726567697374726174696f6e2073686f756c5f8201527f6420626520646f6e65206f6e206f70657261746f72277320726567697374657260208201527f6564207761746368746f77657273000000000000000000000000000000000000604082015250565b5f61378f604e836132e8565b915061379a8261370f565b606082019050919050565b5f6020820190508181035f8301526137bc81613783565b9050919050565b7f5769746e6573734875623a204465726567697374726174696f6e2063616e20625f8201527f6520646f6e65206f6e6c79206f6e2077686974656c6973746564206f7065726160208201527f746f727300000000000000000000000000000000000000000000000000000000604082015250565b5f6138436044836132e8565b915061384e826137c3565b606082019050919050565b5f6020820190508181035f83015261387081613837565b9050919050565b5f60608201905061388a5f830186613017565b6138976020830185613017565b6138a4604083018461343a565b949350505050565b7f5769746e6573734875623a20454c2064656c65676174696f6e20636865636b205f8201527f697320616c72656164792064697361626c656400000000000000000000000000602082015250565b5f6139066033836132e8565b9150613911826138ac565b604082019050919050565b5f6020820190508181035f830152613933816138fa565b9050919050565b7f5769746e6573734875623a205761746368746f776572206164647265737320635f8201527f616e6e6f74206265203000000000000000000000000000000000000000000000602082015250565b5f613994602a836132e8565b915061399f8261393a565b604082019050919050565b5f6020820190508181035f8301526139c181613988565b9050919050565b5f6060820190506139db5f830186613017565b6139e86020830185612fef565b6139f5604083018461343a565b949350505050565b5f81905092915050565b7f19010000000000000000000000000000000000000000000000000000000000005f82015250565b5f613a3b6002836139fd565b9150613a4682613a07565b600282019050919050565b5f819050919050565b613a6b613a6682612daa565b613a51565b82525050565b5f613a7b82613a2f565b9150613a878285613a5a565b602082019150613a978284613a5a565b6020820191508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b613add81612d77565b8114613ae7575f80fd5b50565b5f81519050613af881613ad4565b92915050565b5f60208284031215613b1357613b12612cea565b5b5f613b2084828501613aea565b91505092915050565b5f819050919050565b5f613b406020840184612d38565b905092915050565b5f602082019050919050565b5f613b5f8385613049565b9350613b6a82613b29565b805f5b85811015613ba257613b7f8284613b32565b613b898882613077565b9750613b9483613b48565b925050600181019050613b6d565b5085925050509392505050565b5f6040820190508181035f830152613bc8818587613b54565b9050613bd7602083018461343a565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f613c396026836132e8565b9150613c4482613bdf565b604082019050919050565b5f6020820190508181035f830152613c6681613c2d565b9050919050565b7f5769746e6573734875623a204f70657261746f72206973206e6f7420776869745f8201527f656c69737465642077697468205769746e65737320436861696e204156530000602082015250565b5f613cc7603e836132e8565b9150613cd282613c6d565b604082019050919050565b5f6020820190508181035f830152613cf481613cbb565b9050919050565b7f5769746e6573734875623a20596f75206e65656420746f20626520612064656c5f8201527f656761746564206f70657261746f72207769746820456967656e4c6179657200602082015250565b5f613d55603f836132e8565b9150613d6082613cfb565b604082019050919050565b5f6020820190508181035f830152613d8281613d49565b9050919050565b7f5769746e6573734875623a205761746368746f776572206164647265737320615f8201527f6c72656164792072656769737465726564000000000000000000000000000000602082015250565b5f613de36031836132e8565b9150613dee82613d89565b604082019050919050565b5f6020820190508181035f830152613e1081613dd7565b9050919050565b7f5769746e6573734875623a205761746368746f776572206164647265737320635f8201527f616e6e6f74206265207468652030206164647265737300000000000000000000602082015250565b5f613e716036836132e8565b9150613e7c82613e17565b604082019050919050565b5f6020820190508181035f830152613e9e81613e65565b9050919050565b7f5769746e6573734875623a207761746368746f776572207369676e61747572655f8201527f2065787069726564000000000000000000000000000000000000000000000000602082015250565b5f613eff6028836132e8565b9150613f0a82613ea5565b604082019050919050565b5f6020820190508181035f830152613f2c81613ef3565b9050919050565b7f5769746e6573734875622e72656769737465725761746368746f77657241734f5f8201527f70657261746f723a205761746368746f7765722073616c742073686f756c642060208201527f6e6f7420626520616c7265616479207573656400000000000000000000000000604082015250565b5f613fb36053836132e8565b9150613fbe82613f33565b606082019050919050565b5f6020820190508181035f830152613fe081613fa7565b9050919050565b7f4f70657261746f7252656769737472792e72656769737465725761746368746f5f8201527f77657241734f70657261746f723a20496e76616c6964205369676e6174757265602082015250565b5f6140416040836132e8565b915061404c82613fe7565b604082019050919050565b5f6020820190508181035f83015261406e81614035565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6140a96020836132e8565b91506140b482614075565b602082019050919050565b5f6020820190508181035f8301526140d68161409d565b9050919050565b7f5061757361626c653a20706175736564000000000000000000000000000000005f82015250565b5f6141116010836132e8565b915061411c826140dd565b602082019050919050565b5f6020820190508181035f83015261413e81614105565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61417c82613116565b915061418783613116565b925082820390508181111561419f5761419e614145565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f815190506141e081612db3565b92915050565b5f602082840312156141fb576141fa612cea565b5b5f614208848285016141d2565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e746174695f8201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b5f61426b602e836132e8565b915061427682614211565b604082019050919050565b5f6020820190508181035f8301526142988161425f565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f785f8201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b5f6142f96029836132e8565b91506143048261429f565b604082019050919050565b5f6020820190508181035f830152614326816142ed565b9050919050565b7f5061757361626c653a206e6f74207061757365640000000000000000000000005f82015250565b5f6143616014836132e8565b915061436c8261432d565b602082019050919050565b5f6020820190508181035f83015261438e81614355565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420695f8201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b5f6143ef602b836132e8565b91506143fa82614395565b604082019050919050565b5f6020820190508181035f83015261441c816143e3565b9050919050565b5f6080820190506144365f830187612fef565b6144436020830186612fef565b614450604083018561343a565b61445d6060830184613017565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f6144ed602d836132e8565b91506144f882614493565b604082019050919050565b5f6020820190508181035f83015261451a816144e1565b9050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f61455382614521565b61455d818561452b565b935061456d81856020860161453b565b61457681612e61565b840191505092915050565b5f6040820190506145945f830185612fef565b81810360208301526145a68184614549565b90509392505050565b5f81905092915050565b5f6145c382614521565b6145cd81856145af565b93506145dd81856020860161453b565b80840191505092915050565b5f6145f482846145b9565b915081905092915050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f5f8201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b5f6146596026836132e8565b9150614664826145ff565b604082019050919050565b5f6020820190508181035f8301526146868161464d565b9050919050565b61469681613623565b82525050565b5f6080820190506146af5f830187612fef565b6146bc602083018661468d565b6146c96040830185612fef565b6146d66060830184612fef565b95945050505050565b5f81519050919050565b5f6146f3826146df565b6146fd81856132e8565b935061470d81856020860161453b565b61471681612e61565b840191505092915050565b5f6020820190508181035f83015261473981846146e9565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ab97dc32c00994f6f26285a78590311bc2e659a299e3d9c94954448238feecb864736f6c63430008190033",
}

// OperatorRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use OperatorRegistryMetaData.ABI instead.
var OperatorRegistryABI = OperatorRegistryMetaData.ABI

// OperatorRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OperatorRegistryMetaData.Bin instead.
var OperatorRegistryBin = OperatorRegistryMetaData.Bin

// DeployOperatorRegistry deploys a new Ethereum contract, binding an instance of OperatorRegistry to it.
func DeployOperatorRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OperatorRegistry, error) {
	parsed, err := OperatorRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OperatorRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OperatorRegistry{OperatorRegistryCaller: OperatorRegistryCaller{contract: contract}, OperatorRegistryTransactor: OperatorRegistryTransactor{contract: contract}, OperatorRegistryFilterer: OperatorRegistryFilterer{contract: contract}}, nil
}

// OperatorRegistry is an auto generated Go binding around an Ethereum contract.
type OperatorRegistry struct {
	OperatorRegistryCaller     // Read-only binding to the contract
	OperatorRegistryTransactor // Write-only binding to the contract
	OperatorRegistryFilterer   // Log filterer for contract events
}

// OperatorRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type OperatorRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OperatorRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OperatorRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OperatorRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OperatorRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OperatorRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OperatorRegistrySession struct {
	Contract     *OperatorRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OperatorRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OperatorRegistryCallerSession struct {
	Contract *OperatorRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// OperatorRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OperatorRegistryTransactorSession struct {
	Contract     *OperatorRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// OperatorRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type OperatorRegistryRaw struct {
	Contract *OperatorRegistry // Generic contract binding to access the raw methods on
}

// OperatorRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OperatorRegistryCallerRaw struct {
	Contract *OperatorRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// OperatorRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OperatorRegistryTransactorRaw struct {
	Contract *OperatorRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOperatorRegistry creates a new instance of OperatorRegistry, bound to a specific deployed contract.
func NewOperatorRegistry(address common.Address, backend bind.ContractBackend) (*OperatorRegistry, error) {
	contract, err := bindOperatorRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OperatorRegistry{OperatorRegistryCaller: OperatorRegistryCaller{contract: contract}, OperatorRegistryTransactor: OperatorRegistryTransactor{contract: contract}, OperatorRegistryFilterer: OperatorRegistryFilterer{contract: contract}}, nil
}

// NewOperatorRegistryCaller creates a new read-only instance of OperatorRegistry, bound to a specific deployed contract.
func NewOperatorRegistryCaller(address common.Address, caller bind.ContractCaller) (*OperatorRegistryCaller, error) {
	contract, err := bindOperatorRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryCaller{contract: contract}, nil
}

// NewOperatorRegistryTransactor creates a new write-only instance of OperatorRegistry, bound to a specific deployed contract.
func NewOperatorRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*OperatorRegistryTransactor, error) {
	contract, err := bindOperatorRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryTransactor{contract: contract}, nil
}

// NewOperatorRegistryFilterer creates a new log filterer instance of OperatorRegistry, bound to a specific deployed contract.
func NewOperatorRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*OperatorRegistryFilterer, error) {
	contract, err := bindOperatorRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryFilterer{contract: contract}, nil
}

// bindOperatorRegistry binds a generic wrapper to an already deployed contract.
func bindOperatorRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OperatorRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OperatorRegistry *OperatorRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OperatorRegistry.Contract.OperatorRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OperatorRegistry *OperatorRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.OperatorRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OperatorRegistry *OperatorRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.OperatorRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OperatorRegistry *OperatorRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OperatorRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OperatorRegistry *OperatorRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OperatorRegistry *OperatorRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.contract.Transact(opts, method, params...)
}

// CalculateWatchtowerRegistrationMessageHash is a free data retrieval call binding the contract method 0xae103725.
//
// Solidity: function calculateWatchtowerRegistrationMessageHash(address operator, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_OperatorRegistry *OperatorRegistryCaller) CalculateWatchtowerRegistrationMessageHash(opts *bind.CallOpts, operator common.Address, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "calculateWatchtowerRegistrationMessageHash", operator, salt, expiry)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CalculateWatchtowerRegistrationMessageHash is a free data retrieval call binding the contract method 0xae103725.
//
// Solidity: function calculateWatchtowerRegistrationMessageHash(address operator, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_OperatorRegistry *OperatorRegistrySession) CalculateWatchtowerRegistrationMessageHash(operator common.Address, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	return _OperatorRegistry.Contract.CalculateWatchtowerRegistrationMessageHash(&_OperatorRegistry.CallOpts, operator, salt, expiry)
}

// CalculateWatchtowerRegistrationMessageHash is a free data retrieval call binding the contract method 0xae103725.
//
// Solidity: function calculateWatchtowerRegistrationMessageHash(address operator, bytes32 salt, uint256 expiry) view returns(bytes32)
func (_OperatorRegistry *OperatorRegistryCallerSession) CalculateWatchtowerRegistrationMessageHash(operator common.Address, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	return _OperatorRegistry.Contract.CalculateWatchtowerRegistrationMessageHash(&_OperatorRegistry.CallOpts, operator, salt, expiry)
}

// CheckIsDelegatedOperator is a free data retrieval call binding the contract method 0x9053c5b3.
//
// Solidity: function checkIsDelegatedOperator() view returns(bool)
func (_OperatorRegistry *OperatorRegistryCaller) CheckIsDelegatedOperator(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "checkIsDelegatedOperator")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckIsDelegatedOperator is a free data retrieval call binding the contract method 0x9053c5b3.
//
// Solidity: function checkIsDelegatedOperator() view returns(bool)
func (_OperatorRegistry *OperatorRegistrySession) CheckIsDelegatedOperator() (bool, error) {
	return _OperatorRegistry.Contract.CheckIsDelegatedOperator(&_OperatorRegistry.CallOpts)
}

// CheckIsDelegatedOperator is a free data retrieval call binding the contract method 0x9053c5b3.
//
// Solidity: function checkIsDelegatedOperator() view returns(bool)
func (_OperatorRegistry *OperatorRegistryCallerSession) CheckIsDelegatedOperator() (bool, error) {
	return _OperatorRegistry.Contract.CheckIsDelegatedOperator(&_OperatorRegistry.CallOpts)
}

// DelegationManagerAddress is a free data retrieval call binding the contract method 0xb15e6689.
//
// Solidity: function delegationManagerAddress() view returns(address)
func (_OperatorRegistry *OperatorRegistryCaller) DelegationManagerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "delegationManagerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DelegationManagerAddress is a free data retrieval call binding the contract method 0xb15e6689.
//
// Solidity: function delegationManagerAddress() view returns(address)
func (_OperatorRegistry *OperatorRegistrySession) DelegationManagerAddress() (common.Address, error) {
	return _OperatorRegistry.Contract.DelegationManagerAddress(&_OperatorRegistry.CallOpts)
}

// DelegationManagerAddress is a free data retrieval call binding the contract method 0xb15e6689.
//
// Solidity: function delegationManagerAddress() view returns(address)
func (_OperatorRegistry *OperatorRegistryCallerSession) DelegationManagerAddress() (common.Address, error) {
	return _OperatorRegistry.Contract.DelegationManagerAddress(&_OperatorRegistry.CallOpts)
}

// DomainSeperator is a free data retrieval call binding the contract method 0xcb73ac56.
//
// Solidity: function domainSeperator() view returns(bytes32)
func (_OperatorRegistry *OperatorRegistryCaller) DomainSeperator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "domainSeperator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeperator is a free data retrieval call binding the contract method 0xcb73ac56.
//
// Solidity: function domainSeperator() view returns(bytes32)
func (_OperatorRegistry *OperatorRegistrySession) DomainSeperator() ([32]byte, error) {
	return _OperatorRegistry.Contract.DomainSeperator(&_OperatorRegistry.CallOpts)
}

// DomainSeperator is a free data retrieval call binding the contract method 0xcb73ac56.
//
// Solidity: function domainSeperator() view returns(bytes32)
func (_OperatorRegistry *OperatorRegistryCallerSession) DomainSeperator() ([32]byte, error) {
	return _OperatorRegistry.Contract.DomainSeperator(&_OperatorRegistry.CallOpts)
}

// GetAllActiveOperators is a free data retrieval call binding the contract method 0x5c468db3.
//
// Solidity: function getAllActiveOperators() view returns(address[])
func (_OperatorRegistry *OperatorRegistryCaller) GetAllActiveOperators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "getAllActiveOperators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAllActiveOperators is a free data retrieval call binding the contract method 0x5c468db3.
//
// Solidity: function getAllActiveOperators() view returns(address[])
func (_OperatorRegistry *OperatorRegistrySession) GetAllActiveOperators() ([]common.Address, error) {
	return _OperatorRegistry.Contract.GetAllActiveOperators(&_OperatorRegistry.CallOpts)
}

// GetAllActiveOperators is a free data retrieval call binding the contract method 0x5c468db3.
//
// Solidity: function getAllActiveOperators() view returns(address[])
func (_OperatorRegistry *OperatorRegistryCallerSession) GetAllActiveOperators() ([]common.Address, error) {
	return _OperatorRegistry.Contract.GetAllActiveOperators(&_OperatorRegistry.CallOpts)
}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address watchtower) view returns(address operator)
func (_OperatorRegistry *OperatorRegistryCaller) GetOperator(opts *bind.CallOpts, watchtower common.Address) (common.Address, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "getOperator", watchtower)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address watchtower) view returns(address operator)
func (_OperatorRegistry *OperatorRegistrySession) GetOperator(watchtower common.Address) (common.Address, error) {
	return _OperatorRegistry.Contract.GetOperator(&_OperatorRegistry.CallOpts, watchtower)
}

// GetOperator is a free data retrieval call binding the contract method 0x5865c60c.
//
// Solidity: function getOperator(address watchtower) view returns(address operator)
func (_OperatorRegistry *OperatorRegistryCallerSession) GetOperator(watchtower common.Address) (common.Address, error) {
	return _OperatorRegistry.Contract.GetOperator(&_OperatorRegistry.CallOpts, watchtower)
}

// IsActiveOperator is a free data retrieval call binding the contract method 0x3367cca5.
//
// Solidity: function isActiveOperator(address operator) view returns(bool)
func (_OperatorRegistry *OperatorRegistryCaller) IsActiveOperator(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "isActiveOperator", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActiveOperator is a free data retrieval call binding the contract method 0x3367cca5.
//
// Solidity: function isActiveOperator(address operator) view returns(bool)
func (_OperatorRegistry *OperatorRegistrySession) IsActiveOperator(operator common.Address) (bool, error) {
	return _OperatorRegistry.Contract.IsActiveOperator(&_OperatorRegistry.CallOpts, operator)
}

// IsActiveOperator is a free data retrieval call binding the contract method 0x3367cca5.
//
// Solidity: function isActiveOperator(address operator) view returns(bool)
func (_OperatorRegistry *OperatorRegistryCallerSession) IsActiveOperator(operator common.Address) (bool, error) {
	return _OperatorRegistry.Contract.IsActiveOperator(&_OperatorRegistry.CallOpts, operator)
}

// IsValidWatchtower is a free data retrieval call binding the contract method 0x9a521382.
//
// Solidity: function isValidWatchtower(address watchtower) view returns(bool)
func (_OperatorRegistry *OperatorRegistryCaller) IsValidWatchtower(opts *bind.CallOpts, watchtower common.Address) (bool, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "isValidWatchtower", watchtower)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidWatchtower is a free data retrieval call binding the contract method 0x9a521382.
//
// Solidity: function isValidWatchtower(address watchtower) view returns(bool)
func (_OperatorRegistry *OperatorRegistrySession) IsValidWatchtower(watchtower common.Address) (bool, error) {
	return _OperatorRegistry.Contract.IsValidWatchtower(&_OperatorRegistry.CallOpts, watchtower)
}

// IsValidWatchtower is a free data retrieval call binding the contract method 0x9a521382.
//
// Solidity: function isValidWatchtower(address watchtower) view returns(bool)
func (_OperatorRegistry *OperatorRegistryCallerSession) IsValidWatchtower(watchtower common.Address) (bool, error) {
	return _OperatorRegistry.Contract.IsValidWatchtower(&_OperatorRegistry.CallOpts, watchtower)
}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted(address operator) view returns(bool)
func (_OperatorRegistry *OperatorRegistryCaller) IsWhitelisted(opts *bind.CallOpts, operator common.Address) (bool, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "isWhitelisted", operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted(address operator) view returns(bool)
func (_OperatorRegistry *OperatorRegistrySession) IsWhitelisted(operator common.Address) (bool, error) {
	return _OperatorRegistry.Contract.IsWhitelisted(&_OperatorRegistry.CallOpts, operator)
}

// IsWhitelisted is a free data retrieval call binding the contract method 0x3af32abf.
//
// Solidity: function isWhitelisted(address operator) view returns(bool)
func (_OperatorRegistry *OperatorRegistryCallerSession) IsWhitelisted(operator common.Address) (bool, error) {
	return _OperatorRegistry.Contract.IsWhitelisted(&_OperatorRegistry.CallOpts, operator)
}

// OperatorDetails is a free data retrieval call binding the contract method 0xc5e480db.
//
// Solidity: function operatorDetails(address ) view returns(address operatorAddress, bool isActive)
func (_OperatorRegistry *OperatorRegistryCaller) OperatorDetails(opts *bind.CallOpts, arg0 common.Address) (struct {
	OperatorAddress common.Address
	IsActive        bool
}, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "operatorDetails", arg0)

	outstruct := new(struct {
		OperatorAddress common.Address
		IsActive        bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OperatorAddress = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.IsActive = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// OperatorDetails is a free data retrieval call binding the contract method 0xc5e480db.
//
// Solidity: function operatorDetails(address ) view returns(address operatorAddress, bool isActive)
func (_OperatorRegistry *OperatorRegistrySession) OperatorDetails(arg0 common.Address) (struct {
	OperatorAddress common.Address
	IsActive        bool
}, error) {
	return _OperatorRegistry.Contract.OperatorDetails(&_OperatorRegistry.CallOpts, arg0)
}

// OperatorDetails is a free data retrieval call binding the contract method 0xc5e480db.
//
// Solidity: function operatorDetails(address ) view returns(address operatorAddress, bool isActive)
func (_OperatorRegistry *OperatorRegistryCallerSession) OperatorDetails(arg0 common.Address) (struct {
	OperatorAddress common.Address
	IsActive        bool
}, error) {
	return _OperatorRegistry.Contract.OperatorDetails(&_OperatorRegistry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OperatorRegistry *OperatorRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OperatorRegistry *OperatorRegistrySession) Owner() (common.Address, error) {
	return _OperatorRegistry.Contract.Owner(&_OperatorRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_OperatorRegistry *OperatorRegistryCallerSession) Owner() (common.Address, error) {
	return _OperatorRegistry.Contract.Owner(&_OperatorRegistry.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OperatorRegistry *OperatorRegistryCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OperatorRegistry *OperatorRegistrySession) Paused() (bool, error) {
	return _OperatorRegistry.Contract.Paused(&_OperatorRegistry.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_OperatorRegistry *OperatorRegistryCallerSession) Paused() (bool, error) {
	return _OperatorRegistry.Contract.Paused(&_OperatorRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_OperatorRegistry *OperatorRegistryCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_OperatorRegistry *OperatorRegistrySession) ProxiableUUID() ([32]byte, error) {
	return _OperatorRegistry.Contract.ProxiableUUID(&_OperatorRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_OperatorRegistry *OperatorRegistryCallerSession) ProxiableUUID() ([32]byte, error) {
	return _OperatorRegistry.Contract.ProxiableUUID(&_OperatorRegistry.CallOpts)
}

// SlasherAddress is a free data retrieval call binding the contract method 0xd53c61bf.
//
// Solidity: function slasherAddress() view returns(address)
func (_OperatorRegistry *OperatorRegistryCaller) SlasherAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "slasherAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SlasherAddress is a free data retrieval call binding the contract method 0xd53c61bf.
//
// Solidity: function slasherAddress() view returns(address)
func (_OperatorRegistry *OperatorRegistrySession) SlasherAddress() (common.Address, error) {
	return _OperatorRegistry.Contract.SlasherAddress(&_OperatorRegistry.CallOpts)
}

// SlasherAddress is a free data retrieval call binding the contract method 0xd53c61bf.
//
// Solidity: function slasherAddress() view returns(address)
func (_OperatorRegistry *OperatorRegistryCallerSession) SlasherAddress() (common.Address, error) {
	return _OperatorRegistry.Contract.SlasherAddress(&_OperatorRegistry.CallOpts)
}

// WatchtowerSaltUsed is a free data retrieval call binding the contract method 0x35e40350.
//
// Solidity: function watchtowerSaltUsed(address , bytes32 ) view returns(bool)
func (_OperatorRegistry *OperatorRegistryCaller) WatchtowerSaltUsed(opts *bind.CallOpts, arg0 common.Address, arg1 [32]byte) (bool, error) {
	var out []interface{}
	err := _OperatorRegistry.contract.Call(opts, &out, "watchtowerSaltUsed", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// WatchtowerSaltUsed is a free data retrieval call binding the contract method 0x35e40350.
//
// Solidity: function watchtowerSaltUsed(address , bytes32 ) view returns(bool)
func (_OperatorRegistry *OperatorRegistrySession) WatchtowerSaltUsed(arg0 common.Address, arg1 [32]byte) (bool, error) {
	return _OperatorRegistry.Contract.WatchtowerSaltUsed(&_OperatorRegistry.CallOpts, arg0, arg1)
}

// WatchtowerSaltUsed is a free data retrieval call binding the contract method 0x35e40350.
//
// Solidity: function watchtowerSaltUsed(address , bytes32 ) view returns(bool)
func (_OperatorRegistry *OperatorRegistryCallerSession) WatchtowerSaltUsed(arg0 common.Address, arg1 [32]byte) (bool, error) {
	return _OperatorRegistry.Contract.WatchtowerSaltUsed(&_OperatorRegistry.CallOpts, arg0, arg1)
}

// AddToOperatorWhitelist is a paid mutator transaction binding the contract method 0xc8525c3e.
//
// Solidity: function addToOperatorWhitelist(address[] operatorsList) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) AddToOperatorWhitelist(opts *bind.TransactOpts, operatorsList []common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "addToOperatorWhitelist", operatorsList)
}

// AddToOperatorWhitelist is a paid mutator transaction binding the contract method 0xc8525c3e.
//
// Solidity: function addToOperatorWhitelist(address[] operatorsList) returns()
func (_OperatorRegistry *OperatorRegistrySession) AddToOperatorWhitelist(operatorsList []common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.AddToOperatorWhitelist(&_OperatorRegistry.TransactOpts, operatorsList)
}

// AddToOperatorWhitelist is a paid mutator transaction binding the contract method 0xc8525c3e.
//
// Solidity: function addToOperatorWhitelist(address[] operatorsList) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) AddToOperatorWhitelist(operatorsList []common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.AddToOperatorWhitelist(&_OperatorRegistry.TransactOpts, operatorsList)
}

// DeRegister is a paid mutator transaction binding the contract method 0x5b114af6.
//
// Solidity: function deRegister(address watchtowerAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) DeRegister(opts *bind.TransactOpts, watchtowerAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "deRegister", watchtowerAddress)
}

// DeRegister is a paid mutator transaction binding the contract method 0x5b114af6.
//
// Solidity: function deRegister(address watchtowerAddress) returns()
func (_OperatorRegistry *OperatorRegistrySession) DeRegister(watchtowerAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.DeRegister(&_OperatorRegistry.TransactOpts, watchtowerAddress)
}

// DeRegister is a paid mutator transaction binding the contract method 0x5b114af6.
//
// Solidity: function deRegister(address watchtowerAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) DeRegister(watchtowerAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.DeRegister(&_OperatorRegistry.TransactOpts, watchtowerAddress)
}

// DisableCheckIsDelegatedOperator is a paid mutator transaction binding the contract method 0x827a1bf5.
//
// Solidity: function disableCheckIsDelegatedOperator() returns()
func (_OperatorRegistry *OperatorRegistryTransactor) DisableCheckIsDelegatedOperator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "disableCheckIsDelegatedOperator")
}

// DisableCheckIsDelegatedOperator is a paid mutator transaction binding the contract method 0x827a1bf5.
//
// Solidity: function disableCheckIsDelegatedOperator() returns()
func (_OperatorRegistry *OperatorRegistrySession) DisableCheckIsDelegatedOperator() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.DisableCheckIsDelegatedOperator(&_OperatorRegistry.TransactOpts)
}

// DisableCheckIsDelegatedOperator is a paid mutator transaction binding the contract method 0x827a1bf5.
//
// Solidity: function disableCheckIsDelegatedOperator() returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) DisableCheckIsDelegatedOperator() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.DisableCheckIsDelegatedOperator(&_OperatorRegistry.TransactOpts)
}

// EnableCheckIsDelegatedOperator is a paid mutator transaction binding the contract method 0x17fa0ce8.
//
// Solidity: function enableCheckIsDelegatedOperator() returns()
func (_OperatorRegistry *OperatorRegistryTransactor) EnableCheckIsDelegatedOperator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "enableCheckIsDelegatedOperator")
}

// EnableCheckIsDelegatedOperator is a paid mutator transaction binding the contract method 0x17fa0ce8.
//
// Solidity: function enableCheckIsDelegatedOperator() returns()
func (_OperatorRegistry *OperatorRegistrySession) EnableCheckIsDelegatedOperator() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.EnableCheckIsDelegatedOperator(&_OperatorRegistry.TransactOpts)
}

// EnableCheckIsDelegatedOperator is a paid mutator transaction binding the contract method 0x17fa0ce8.
//
// Solidity: function enableCheckIsDelegatedOperator() returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) EnableCheckIsDelegatedOperator() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.EnableCheckIsDelegatedOperator(&_OperatorRegistry.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _delegationManagerAddress, address _slasherAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) Initialize(opts *bind.TransactOpts, _delegationManagerAddress common.Address, _slasherAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "initialize", _delegationManagerAddress, _slasherAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _delegationManagerAddress, address _slasherAddress) returns()
func (_OperatorRegistry *OperatorRegistrySession) Initialize(_delegationManagerAddress common.Address, _slasherAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.Initialize(&_OperatorRegistry.TransactOpts, _delegationManagerAddress, _slasherAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _delegationManagerAddress, address _slasherAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) Initialize(_delegationManagerAddress common.Address, _slasherAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.Initialize(&_OperatorRegistry.TransactOpts, _delegationManagerAddress, _slasherAddress)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OperatorRegistry *OperatorRegistryTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OperatorRegistry *OperatorRegistrySession) Pause() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.Pause(&_OperatorRegistry.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) Pause() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.Pause(&_OperatorRegistry.TransactOpts)
}

// RegisterWatchtowerAsOperator is a paid mutator transaction binding the contract method 0xfc4bd47f.
//
// Solidity: function registerWatchtowerAsOperator(address watchtower, bytes32 salt, uint256 expiry, bytes signedMessage) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) RegisterWatchtowerAsOperator(opts *bind.TransactOpts, watchtower common.Address, salt [32]byte, expiry *big.Int, signedMessage []byte) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "registerWatchtowerAsOperator", watchtower, salt, expiry, signedMessage)
}

// RegisterWatchtowerAsOperator is a paid mutator transaction binding the contract method 0xfc4bd47f.
//
// Solidity: function registerWatchtowerAsOperator(address watchtower, bytes32 salt, uint256 expiry, bytes signedMessage) returns()
func (_OperatorRegistry *OperatorRegistrySession) RegisterWatchtowerAsOperator(watchtower common.Address, salt [32]byte, expiry *big.Int, signedMessage []byte) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.RegisterWatchtowerAsOperator(&_OperatorRegistry.TransactOpts, watchtower, salt, expiry, signedMessage)
}

// RegisterWatchtowerAsOperator is a paid mutator transaction binding the contract method 0xfc4bd47f.
//
// Solidity: function registerWatchtowerAsOperator(address watchtower, bytes32 salt, uint256 expiry, bytes signedMessage) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) RegisterWatchtowerAsOperator(watchtower common.Address, salt [32]byte, expiry *big.Int, signedMessage []byte) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.RegisterWatchtowerAsOperator(&_OperatorRegistry.TransactOpts, watchtower, salt, expiry, signedMessage)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OperatorRegistry *OperatorRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OperatorRegistry *OperatorRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.RenounceOwnership(&_OperatorRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.RenounceOwnership(&_OperatorRegistry.TransactOpts)
}

// SetDelegationManagerAddress is a paid mutator transaction binding the contract method 0x7831ad20.
//
// Solidity: function setDelegationManagerAddress(address _delegationManagerAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) SetDelegationManagerAddress(opts *bind.TransactOpts, _delegationManagerAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "setDelegationManagerAddress", _delegationManagerAddress)
}

// SetDelegationManagerAddress is a paid mutator transaction binding the contract method 0x7831ad20.
//
// Solidity: function setDelegationManagerAddress(address _delegationManagerAddress) returns()
func (_OperatorRegistry *OperatorRegistrySession) SetDelegationManagerAddress(_delegationManagerAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.SetDelegationManagerAddress(&_OperatorRegistry.TransactOpts, _delegationManagerAddress)
}

// SetDelegationManagerAddress is a paid mutator transaction binding the contract method 0x7831ad20.
//
// Solidity: function setDelegationManagerAddress(address _delegationManagerAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) SetDelegationManagerAddress(_delegationManagerAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.SetDelegationManagerAddress(&_OperatorRegistry.TransactOpts, _delegationManagerAddress)
}

// SetSlasherAddress is a paid mutator transaction binding the contract method 0xaddd9cf5.
//
// Solidity: function setSlasherAddress(address _slasherAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) SetSlasherAddress(opts *bind.TransactOpts, _slasherAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "setSlasherAddress", _slasherAddress)
}

// SetSlasherAddress is a paid mutator transaction binding the contract method 0xaddd9cf5.
//
// Solidity: function setSlasherAddress(address _slasherAddress) returns()
func (_OperatorRegistry *OperatorRegistrySession) SetSlasherAddress(_slasherAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.SetSlasherAddress(&_OperatorRegistry.TransactOpts, _slasherAddress)
}

// SetSlasherAddress is a paid mutator transaction binding the contract method 0xaddd9cf5.
//
// Solidity: function setSlasherAddress(address _slasherAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) SetSlasherAddress(_slasherAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.SetSlasherAddress(&_OperatorRegistry.TransactOpts, _slasherAddress)
}

// Suspend is a paid mutator transaction binding the contract method 0x286781c7.
//
// Solidity: function suspend(address operatorAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) Suspend(opts *bind.TransactOpts, operatorAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "suspend", operatorAddress)
}

// Suspend is a paid mutator transaction binding the contract method 0x286781c7.
//
// Solidity: function suspend(address operatorAddress) returns()
func (_OperatorRegistry *OperatorRegistrySession) Suspend(operatorAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.Suspend(&_OperatorRegistry.TransactOpts, operatorAddress)
}

// Suspend is a paid mutator transaction binding the contract method 0x286781c7.
//
// Solidity: function suspend(address operatorAddress) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) Suspend(operatorAddress common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.Suspend(&_OperatorRegistry.TransactOpts, operatorAddress)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OperatorRegistry *OperatorRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.TransferOwnership(&_OperatorRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.TransferOwnership(&_OperatorRegistry.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OperatorRegistry *OperatorRegistryTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OperatorRegistry *OperatorRegistrySession) Unpause() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.Unpause(&_OperatorRegistry.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) Unpause() (*types.Transaction, error) {
	return _OperatorRegistry.Contract.Unpause(&_OperatorRegistry.TransactOpts)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_OperatorRegistry *OperatorRegistryTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_OperatorRegistry *OperatorRegistrySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.UpgradeTo(&_OperatorRegistry.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.UpgradeTo(&_OperatorRegistry.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_OperatorRegistry *OperatorRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _OperatorRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_OperatorRegistry *OperatorRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.UpgradeToAndCall(&_OperatorRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_OperatorRegistry *OperatorRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _OperatorRegistry.Contract.UpgradeToAndCall(&_OperatorRegistry.TransactOpts, newImplementation, data)
}

// OperatorRegistryAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the OperatorRegistry contract.
type OperatorRegistryAdminChangedIterator struct {
	Event *OperatorRegistryAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryAdminChanged represents a AdminChanged event raised by the OperatorRegistry contract.
type OperatorRegistryAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*OperatorRegistryAdminChangedIterator, error) {

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryAdminChangedIterator{contract: _OperatorRegistry.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *OperatorRegistryAdminChanged) (event.Subscription, error) {

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryAdminChanged)
				if err := _OperatorRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseAdminChanged(log types.Log) (*OperatorRegistryAdminChanged, error) {
	event := new(OperatorRegistryAdminChanged)
	if err := _OperatorRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the OperatorRegistry contract.
type OperatorRegistryBeaconUpgradedIterator struct {
	Event *OperatorRegistryBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryBeaconUpgraded represents a BeaconUpgraded event raised by the OperatorRegistry contract.
type OperatorRegistryBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*OperatorRegistryBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryBeaconUpgradedIterator{contract: _OperatorRegistry.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *OperatorRegistryBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryBeaconUpgraded)
				if err := _OperatorRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseBeaconUpgraded(log types.Log) (*OperatorRegistryBeaconUpgraded, error) {
	event := new(OperatorRegistryBeaconUpgraded)
	if err := _OperatorRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the OperatorRegistry contract.
type OperatorRegistryInitializedIterator struct {
	Event *OperatorRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryInitialized represents a Initialized event raised by the OperatorRegistry contract.
type OperatorRegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*OperatorRegistryInitializedIterator, error) {

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryInitializedIterator{contract: _OperatorRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *OperatorRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryInitialized)
				if err := _OperatorRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseInitialized(log types.Log) (*OperatorRegistryInitialized, error) {
	event := new(OperatorRegistryInitialized)
	if err := _OperatorRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryOperatorSuspendedIterator is returned from FilterOperatorSuspended and is used to iterate over the raw logs and unpacked data for OperatorSuspended events raised by the OperatorRegistry contract.
type OperatorRegistryOperatorSuspendedIterator struct {
	Event *OperatorRegistryOperatorSuspended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryOperatorSuspendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryOperatorSuspended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryOperatorSuspended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryOperatorSuspendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryOperatorSuspendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryOperatorSuspended represents a OperatorSuspended event raised by the OperatorRegistry contract.
type OperatorRegistryOperatorSuspended struct {
	Operator    common.Address
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOperatorSuspended is a free log retrieval operation binding the contract event 0x98ff055e829cd4bfba35f84d3b43877fd53084d2deebbb1cda57404f44df4def.
//
// Solidity: event OperatorSuspended(address operator, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterOperatorSuspended(opts *bind.FilterOpts) (*OperatorRegistryOperatorSuspendedIterator, error) {

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "OperatorSuspended")
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryOperatorSuspendedIterator{contract: _OperatorRegistry.contract, event: "OperatorSuspended", logs: logs, sub: sub}, nil
}

// WatchOperatorSuspended is a free log subscription operation binding the contract event 0x98ff055e829cd4bfba35f84d3b43877fd53084d2deebbb1cda57404f44df4def.
//
// Solidity: event OperatorSuspended(address operator, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchOperatorSuspended(opts *bind.WatchOpts, sink chan<- *OperatorRegistryOperatorSuspended) (event.Subscription, error) {

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "OperatorSuspended")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryOperatorSuspended)
				if err := _OperatorRegistry.contract.UnpackLog(event, "OperatorSuspended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorSuspended is a log parse operation binding the contract event 0x98ff055e829cd4bfba35f84d3b43877fd53084d2deebbb1cda57404f44df4def.
//
// Solidity: event OperatorSuspended(address operator, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseOperatorSuspended(log types.Log) (*OperatorRegistryOperatorSuspended, error) {
	event := new(OperatorRegistryOperatorSuspended)
	if err := _OperatorRegistry.contract.UnpackLog(event, "OperatorSuspended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryOperatorsWhiteListedIterator is returned from FilterOperatorsWhiteListed and is used to iterate over the raw logs and unpacked data for OperatorsWhiteListed events raised by the OperatorRegistry contract.
type OperatorRegistryOperatorsWhiteListedIterator struct {
	Event *OperatorRegistryOperatorsWhiteListed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryOperatorsWhiteListedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryOperatorsWhiteListed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryOperatorsWhiteListed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryOperatorsWhiteListedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryOperatorsWhiteListedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryOperatorsWhiteListed represents a OperatorsWhiteListed event raised by the OperatorRegistry contract.
type OperatorRegistryOperatorsWhiteListed struct {
	Operator    []common.Address
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterOperatorsWhiteListed is a free log retrieval operation binding the contract event 0xdd7d462090c5f3ddd88b4c509269e35d5e148454dc3a9bd24812f78efc8f306f.
//
// Solidity: event OperatorsWhiteListed(address[] operator, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterOperatorsWhiteListed(opts *bind.FilterOpts) (*OperatorRegistryOperatorsWhiteListedIterator, error) {

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "OperatorsWhiteListed")
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryOperatorsWhiteListedIterator{contract: _OperatorRegistry.contract, event: "OperatorsWhiteListed", logs: logs, sub: sub}, nil
}

// WatchOperatorsWhiteListed is a free log subscription operation binding the contract event 0xdd7d462090c5f3ddd88b4c509269e35d5e148454dc3a9bd24812f78efc8f306f.
//
// Solidity: event OperatorsWhiteListed(address[] operator, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchOperatorsWhiteListed(opts *bind.WatchOpts, sink chan<- *OperatorRegistryOperatorsWhiteListed) (event.Subscription, error) {

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "OperatorsWhiteListed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryOperatorsWhiteListed)
				if err := _OperatorRegistry.contract.UnpackLog(event, "OperatorsWhiteListed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorsWhiteListed is a log parse operation binding the contract event 0xdd7d462090c5f3ddd88b4c509269e35d5e148454dc3a9bd24812f78efc8f306f.
//
// Solidity: event OperatorsWhiteListed(address[] operator, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseOperatorsWhiteListed(log types.Log) (*OperatorRegistryOperatorsWhiteListed, error) {
	event := new(OperatorRegistryOperatorsWhiteListed)
	if err := _OperatorRegistry.contract.UnpackLog(event, "OperatorsWhiteListed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the OperatorRegistry contract.
type OperatorRegistryOwnershipTransferredIterator struct {
	Event *OperatorRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the OperatorRegistry contract.
type OperatorRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OperatorRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryOwnershipTransferredIterator{contract: _OperatorRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OperatorRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryOwnershipTransferred)
				if err := _OperatorRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*OperatorRegistryOwnershipTransferred, error) {
	event := new(OperatorRegistryOwnershipTransferred)
	if err := _OperatorRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the OperatorRegistry contract.
type OperatorRegistryPausedIterator struct {
	Event *OperatorRegistryPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryPaused represents a Paused event raised by the OperatorRegistry contract.
type OperatorRegistryPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterPaused(opts *bind.FilterOpts) (*OperatorRegistryPausedIterator, error) {

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryPausedIterator{contract: _OperatorRegistry.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *OperatorRegistryPaused) (event.Subscription, error) {

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryPaused)
				if err := _OperatorRegistry.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_OperatorRegistry *OperatorRegistryFilterer) ParsePaused(log types.Log) (*OperatorRegistryPaused, error) {
	event := new(OperatorRegistryPaused)
	if err := _OperatorRegistry.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the OperatorRegistry contract.
type OperatorRegistryUnpausedIterator struct {
	Event *OperatorRegistryUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryUnpaused represents a Unpaused event raised by the OperatorRegistry contract.
type OperatorRegistryUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterUnpaused(opts *bind.FilterOpts) (*OperatorRegistryUnpausedIterator, error) {

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryUnpausedIterator{contract: _OperatorRegistry.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *OperatorRegistryUnpaused) (event.Subscription, error) {

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryUnpaused)
				if err := _OperatorRegistry.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseUnpaused(log types.Log) (*OperatorRegistryUnpaused, error) {
	event := new(OperatorRegistryUnpaused)
	if err := _OperatorRegistry.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the OperatorRegistry contract.
type OperatorRegistryUpgradedIterator struct {
	Event *OperatorRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryUpgraded represents a Upgraded event raised by the OperatorRegistry contract.
type OperatorRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*OperatorRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryUpgradedIterator{contract: _OperatorRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *OperatorRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryUpgraded)
				if err := _OperatorRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseUpgraded(log types.Log) (*OperatorRegistryUpgraded, error) {
	event := new(OperatorRegistryUpgraded)
	if err := _OperatorRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryWatchtowerDeRegisteredFromOperatorIterator is returned from FilterWatchtowerDeRegisteredFromOperator and is used to iterate over the raw logs and unpacked data for WatchtowerDeRegisteredFromOperator events raised by the OperatorRegistry contract.
type OperatorRegistryWatchtowerDeRegisteredFromOperatorIterator struct {
	Event *OperatorRegistryWatchtowerDeRegisteredFromOperator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryWatchtowerDeRegisteredFromOperatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryWatchtowerDeRegisteredFromOperator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryWatchtowerDeRegisteredFromOperator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryWatchtowerDeRegisteredFromOperatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryWatchtowerDeRegisteredFromOperatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryWatchtowerDeRegisteredFromOperator represents a WatchtowerDeRegisteredFromOperator event raised by the OperatorRegistry contract.
type OperatorRegistryWatchtowerDeRegisteredFromOperator struct {
	Operator    common.Address
	Watchtower  common.Address
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWatchtowerDeRegisteredFromOperator is a free log retrieval operation binding the contract event 0xecfc290ff8c3aac71e14aee07653f81e5aa316be4d2315ba2ec1bff9dc50cd79.
//
// Solidity: event WatchtowerDeRegisteredFromOperator(address operator, address watchtower, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterWatchtowerDeRegisteredFromOperator(opts *bind.FilterOpts) (*OperatorRegistryWatchtowerDeRegisteredFromOperatorIterator, error) {

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "WatchtowerDeRegisteredFromOperator")
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryWatchtowerDeRegisteredFromOperatorIterator{contract: _OperatorRegistry.contract, event: "WatchtowerDeRegisteredFromOperator", logs: logs, sub: sub}, nil
}

// WatchWatchtowerDeRegisteredFromOperator is a free log subscription operation binding the contract event 0xecfc290ff8c3aac71e14aee07653f81e5aa316be4d2315ba2ec1bff9dc50cd79.
//
// Solidity: event WatchtowerDeRegisteredFromOperator(address operator, address watchtower, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchWatchtowerDeRegisteredFromOperator(opts *bind.WatchOpts, sink chan<- *OperatorRegistryWatchtowerDeRegisteredFromOperator) (event.Subscription, error) {

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "WatchtowerDeRegisteredFromOperator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryWatchtowerDeRegisteredFromOperator)
				if err := _OperatorRegistry.contract.UnpackLog(event, "WatchtowerDeRegisteredFromOperator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWatchtowerDeRegisteredFromOperator is a log parse operation binding the contract event 0xecfc290ff8c3aac71e14aee07653f81e5aa316be4d2315ba2ec1bff9dc50cd79.
//
// Solidity: event WatchtowerDeRegisteredFromOperator(address operator, address watchtower, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseWatchtowerDeRegisteredFromOperator(log types.Log) (*OperatorRegistryWatchtowerDeRegisteredFromOperator, error) {
	event := new(OperatorRegistryWatchtowerDeRegisteredFromOperator)
	if err := _OperatorRegistry.contract.UnpackLog(event, "WatchtowerDeRegisteredFromOperator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OperatorRegistryWatchtowerRegisteredToOperatorIterator is returned from FilterWatchtowerRegisteredToOperator and is used to iterate over the raw logs and unpacked data for WatchtowerRegisteredToOperator events raised by the OperatorRegistry contract.
type OperatorRegistryWatchtowerRegisteredToOperatorIterator struct {
	Event *OperatorRegistryWatchtowerRegisteredToOperator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OperatorRegistryWatchtowerRegisteredToOperatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OperatorRegistryWatchtowerRegisteredToOperator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OperatorRegistryWatchtowerRegisteredToOperator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OperatorRegistryWatchtowerRegisteredToOperatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OperatorRegistryWatchtowerRegisteredToOperatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OperatorRegistryWatchtowerRegisteredToOperator represents a WatchtowerRegisteredToOperator event raised by the OperatorRegistry contract.
type OperatorRegistryWatchtowerRegisteredToOperator struct {
	Operator    common.Address
	Watchtower  common.Address
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWatchtowerRegisteredToOperator is a free log retrieval operation binding the contract event 0x3d521ffddd8cbc2d603c1e7fe9af4b70adbbc43675a7281c5624d8053e526f06.
//
// Solidity: event WatchtowerRegisteredToOperator(address operator, address watchtower, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) FilterWatchtowerRegisteredToOperator(opts *bind.FilterOpts) (*OperatorRegistryWatchtowerRegisteredToOperatorIterator, error) {

	logs, sub, err := _OperatorRegistry.contract.FilterLogs(opts, "WatchtowerRegisteredToOperator")
	if err != nil {
		return nil, err
	}
	return &OperatorRegistryWatchtowerRegisteredToOperatorIterator{contract: _OperatorRegistry.contract, event: "WatchtowerRegisteredToOperator", logs: logs, sub: sub}, nil
}

// WatchWatchtowerRegisteredToOperator is a free log subscription operation binding the contract event 0x3d521ffddd8cbc2d603c1e7fe9af4b70adbbc43675a7281c5624d8053e526f06.
//
// Solidity: event WatchtowerRegisteredToOperator(address operator, address watchtower, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) WatchWatchtowerRegisteredToOperator(opts *bind.WatchOpts, sink chan<- *OperatorRegistryWatchtowerRegisteredToOperator) (event.Subscription, error) {

	logs, sub, err := _OperatorRegistry.contract.WatchLogs(opts, "WatchtowerRegisteredToOperator")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OperatorRegistryWatchtowerRegisteredToOperator)
				if err := _OperatorRegistry.contract.UnpackLog(event, "WatchtowerRegisteredToOperator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWatchtowerRegisteredToOperator is a log parse operation binding the contract event 0x3d521ffddd8cbc2d603c1e7fe9af4b70adbbc43675a7281c5624d8053e526f06.
//
// Solidity: event WatchtowerRegisteredToOperator(address operator, address watchtower, uint256 blockNumber)
func (_OperatorRegistry *OperatorRegistryFilterer) ParseWatchtowerRegisteredToOperator(log types.Log) (*OperatorRegistryWatchtowerRegisteredToOperator, error) {
	event := new(OperatorRegistryWatchtowerRegisteredToOperator)
	if err := _OperatorRegistry.contract.UnpackLog(event, "WatchtowerRegisteredToOperator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
